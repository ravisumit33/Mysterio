"""
Django settings for mysterio project.

Generated by 'django-admin startproject' using Django 3.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

from datetime import timedelta
import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent.parent

# Application definition

INSTALLED_APPS = [
    "core",
    "customauth",
    "chat",
    "channels",
    "rest_framework",
    "rest_framework.authtoken",
    "dj_rest_auth",
    "rest_framework_simplejwt.token_blacklist",
    "corsheaders",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.sites",
    "allauth",
    "allauth.account",
    "dj_rest_auth.registration",
    "allauth.socialaccount",
    "allauth.socialaccount.providers.google",
    "django_celery_beat",
]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "customauth.middleware.add_jwt_cookie_to_request_body",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]


ROOT_URLCONF = "mysterio.urls"

FRONTEND_ROUTES = [
    "login/",
    "register/",
    "account/",
    "account/confirm-email/(?P<key>[-:\w]+)/",  # pylint: disable=anomalous-backslash-in-string
]


FRONTEND_DIR = os.path.join(BASE_DIR, "frontend")

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            os.path.join(FRONTEND_DIR, "build"),
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]


DEFAULT_AUTO_FIELD = "django.db.models.AutoField"

WSGI_APPLICATION = "mysterio.wsgi.application"

ASGI_APPLICATION = "mysterio.asgi.application"


CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

AUTHENTICATION_BACKENDS = [
    # Needed to login by username in Django admin, regardless of `allauth`
    "django.contrib.auth.backends.ModelBackend",
    # `allauth` specific authentication methods, such as login by e-mail
    "allauth.account.auth_backends.AuthenticationBackend",
]

AUTH_USER_MODEL = "customauth.User"

# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "Asia/Kolkata"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = "/static/"

STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")

STATICFILES_DIRS = [
    os.path.join(FRONTEND_DIR, "build", "static"),
]

STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"


# Logging configuration

BASE_LOG_FORMAT = (
    "module=%(name)s lineno=%(lineno)s funcname=%(funcName)s "
    + "%(log_color)s[%(levelname)s]%(reset)s %(blue)s%(message)s"
)

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "()": "colorlog.ColoredFormatter",
            "format": "%(asctime)s [%(process)d] " + BASE_LOG_FORMAT,
            "datefmt": "%Y-%m-%d %H:%M:%S",
        },
        "simple": {
            "()": "colorlog.ColoredFormatter",
            "format": "%(asctime)s " + BASE_LOG_FORMAT,
            "datefmt": "%H:%M:%S",
        },
    },
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
        }
    },
    "root": {
        "handlers": ["console"],
        "level": "WARNING",
    },
}


# Rest framework & auth configurations

REST_FRAMEWORK = {
    "DEFAULT_PERMISSION_CLASSES": ["rest_framework.permissions.IsAuthenticated"],
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "dj_rest_auth.jwt_auth.JWTCookieAuthentication",
    ),
}

REST_AUTH_SERIALIZERS = {
    "LOGIN_SERIALIZER": "customauth.serializers.LoginSerializer",
    "USER_DETAILS_SERIALIZER": "customauth.serializers.UserDetailsSerializer",
}


REST_USE_JWT = True

REST_SESSION_LOGIN = False

JWT_AUTH_COOKIE = "mysterio-access-token"

JWT_AUTH_REFRESH_COOKIE = "mysterio-refresh-token"

OLD_PASSWORD_FIELD_ENABLED = True

SIMPLE_JWT = {
    "ROTATE_REFRESH_TOKENS": True,
    "BLACKLIST_AFTER_ROTATION": True,
}

ACCOUNT_AUTHENTICATION_METHOD = "email"

ACCOUNT_EMAIL_REQUIRED = True

ACCOUNT_EMAIL_VERIFICATION = "mandatory"

ACCOUNT_USERNAME_REQUIRED = False

ACCOUNT_USER_MODEL_USERNAME_FIELD = None

ACCOUNT_ADAPTER = "customauth.adapter.AccountAdapter"

SOCIALACCOUNT_PROVIDERS = {
    "google_modified": {
        "SCOPE": [
            "profile",
            "email",
        ],
        "AUTH_PARAMS": {
            "access_type": "online",
        },
    }
}


# Cors headers configurations

CORS_ORIGIN_ALLOW_ALL = False

CELERY_BEAT_SCHEDULE = {
    "match": {
        "task": "chat.tasks.match_channels",
        "schedule": timedelta(seconds=1),
    },
    "trending_rooms": {
        "task": "chat.tasks.trending_rooms",
        "schedule": timedelta(hours=12),
    },
    "group_rooms": {
        "task": "chat.tasks.group_rooms",
        "schedule": timedelta(days=1),
    },
    "token_blacklist": {
        "task": "customauth.tasks.flush_tokens",
        "schedule": timedelta(days=1),
    },
}
